---
// Stats data
const stats = [
  {
    title: "Total Value Locked",
    value: "2.45",
    unit: "BTC",
    icon: "money",
    color: "primary",
    growthRate: "+12.5%"
  },
  {
    title: "Active Users",
    value: "1,250",
    unit: "",
    icon: "users",
    color: "secondary",
    growthRate: "+8.3%"
  },
  {
    title: "Pools Live",
    value: "4",
    unit: "",
    icon: "pools",
    color: "mint",
    growthRate: ""
  }
];
---

<section class="py-16 relative z-10 overflow-hidden bg-gradient-to-br from-purple-600 via-indigo-600 to-blue-500 text-white">
  <div class="absolute top-10 right-10 opacity-20 w-64 h-64">
    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="blob-animation">
      <path fill="#FFFFFF" d="M45.3,-51.2C58.4,-40.6,69,-25.2,71.9,-8.4C74.9,8.4,70.2,26.8,59.1,38.7C48,50.6,30.6,56,13.1,59.8C-4.3,63.6,-21.9,66,-36.9,59.5C-51.9,53,-64.4,37.8,-67.6,21C-70.8,4.3,-64.9,-13.9,-55.3,-28.5C-45.6,-43.1,-32.2,-54,-17.4,-59.9C-2.7,-65.7,13.5,-66.5,28.5,-62.7C43.6,-58.9,57.4,-50.4,73.3,-37.6C89.1,-24.9,107,-8.8,117.3,12C127.6,32.8,130.3,58.3,118.9,71.1C107.5,83.9,82,83.9,59.9,82.5C37.8,81.1,19.1,78.3,0,78.2C-19.1,78.2,-38.1,80.9,-54.5,74.4C-70.9,67.9,-84.6,52.2,-92.2,33.8C-99.8,15.4,-101.3,-5.6,-94.1,-22.6C-86.9,-39.5,-71,-52.3,-54.5,-61C-38,-69.7,-21,-74.2,-3.3,-70.6C14.5,-67,29,-55.2,45.3,-51.2Z" transform="translate(100 100)" />
    </svg>
  </div>
  
  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-5xl mx-auto">
      <div class="flex flex-col md:flex-row justify-between items-center gap-8 md:gap-4">
        {stats.map((stat, index) => (
          <div class="w-full md:w-1/3">
            <div class="flex flex-col items-center text-center py-6 px-4 rounded-xl relative group transition duration-300 hover:bg-white/10 backdrop-blur-sm hover:-translate-y-1 hover:shadow-lg">
              <div class="mb-4 w-16 h-16 rounded-full bg-white/10 flex items-center justify-center shadow-md">
                {stat.icon === "money" && (
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                )}
                {stat.icon === "users" && (
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                )}
                {stat.icon === "pools" && (
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>
                )}
              </div>
              
              <div class="flex items-baseline justify-center">
                <span class="text-4xl md:text-5xl font-light tracking-tight" id={`counter-${index}`}>
                  {stat.value}
                </span>
                {stat.unit && (
                  <span class="ml-1 text-xl font-light">{stat.unit}</span>
                )}
              </div>
              
              <div class="mt-2">
                <p class="text-white/80 font-light">{stat.title}</p>
                
                {stat.growthRate && (
                  <div class="mt-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-white/10 backdrop-blur-sm text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
                    </svg>
                    {stat.growthRate} last 30d
                  </div>
                )}
              </div>
              
              <div class="absolute -bottom-2 left-0 right-0 h-0.5 bg-gradient-to-r from-transparent via-white to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  // Simple counter animation
  function animateCounter(el, target, duration = 1500) {
    const start = 0;
    const startTime = performance.now();
    
    function updateCounter(currentTime) {
      const elapsedTime = currentTime - startTime;
      const progress = Math.min(elapsedTime / duration, 1);
      const easeProgress = 1 - Math.pow(1 - progress, 3); // Cubic ease out
      
      // Handle comma-separated numbers
      if (target.includes(',')) {
        const numericTarget = parseInt(target.replace(/,/g, ''));
        const currentValue = Math.floor(start + (numericTarget - start) * easeProgress);
        el.textContent = currentValue.toLocaleString();
      } else {
        // Handle decimal numbers
        const numericTarget = parseFloat(target);
        const currentValue = start + (numericTarget - start) * easeProgress;
        el.textContent = Number.isInteger(numericTarget) ? 
          Math.floor(currentValue).toString() : 
          currentValue.toFixed(2).replace(/\.00$/, '');
      }
      
      if (progress < 1) {
        requestAnimationFrame(updateCounter);
      }
    }
    
    requestAnimationFrame(updateCounter);
  }
  
  // Initialize counter animations when in viewport
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const counters = document.querySelectorAll('[id^="counter-"]');
        counters.forEach((counter, i) => {
          animateCounter(counter, counter.textContent.trim());
        });
        observer.disconnect();
      }
    });
  }, { threshold: 0.1 });
  
  // Observe the first counter element
  const firstCounter = document.getElementById('counter-0');
  if (firstCounter) {
    observer.observe(firstCounter);
  }
</script>

<style>
  @keyframes blob-float {
    0%   { transform: translate(0, 0) scale(1); }
    50%  { transform: translate(10px, -10px) scale(1.05); }
    100% { transform: translate(0, 0) scale(1); }
  }
  
  .blob-animation {
    animation: blob-float 12s ease-in-out infinite;
  }
</style> 