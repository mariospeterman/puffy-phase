---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

// Get current language and translations
const lang = Astro.locals.lang || getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const steps = [
  {
    title: "Initial Subscription",
    description: "Set up a recurring €50-€200 monthly payment via Stripe that automatically converts to Bitcoin.",
    icon: "subscribe",
    color: "primary",
    month: "0"
  },
  {
    title: "Algorithmic Pooling",
    description: "Your Bitcoin joins a time-locked pool with DAO-governed risk controls and stop-loss protection (-20%).",
    icon: "pool",
    color: "secondary",
    month: "1-12"
  },
  {
    title: "Quarterly Rebalancing",
    description: "The pool automatically rebalances 4 times yearly with stop-loss and take-profit mechanisms (+50%).",
    icon: "rebalance",
    color: "tertiary",
    month: "3-60"
  },
  {
    title: "First Unlocking Phase",
    description: "First tranche (25%) unlocks at year 5. Redeem or keep vested for continued growth.",
    icon: "unlock",
    color: "mint",
    month: "60"
  },
  {
    title: "Final Maturation",
    description: "Remaining tranches unlock at years 10, 15, and 20 with 80% of profits returned to you.",
    icon: "profit",
    color: "primary", 
    month: "120-240"
  }
];
---

<section class="py-16 relative overflow-hidden bg-white">
  <div class="absolute inset-0 bg-[url('/grid-pattern.svg')] opacity-[0.03]"></div>
  
  <!-- Academic/Technical header styling -->
  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-4xl mx-auto text-center mb-10">
      <div class="inline-block px-6 py-2 rounded-lg bg-gradient-to-r from-purple-100 to-blue-100 text-purple-600 text-sm font-medium mb-4">
        Technical Framework
      </div>
      <h2 class="text-3xl md:text-4xl font-light mb-4">
        <span class="text-gradient">{t('howItWorks.title')}</span>
      </h2>
      <p class="text-lg text-gray-600 max-w-3xl mx-auto">
        {t('howItWorks.subtitle')}
      </p>
    </div>

    <!-- Interactive roadmap - horizontal layout -->
    <div class="max-w-5xl mx-auto relative">
      <!-- Timeline horizontal line -->
      <div class="absolute top-24 left-0 right-0 h-1 bg-gradient-to-r from-purple-500 to-blue-500 z-0 rounded-full hidden md:block"></div>
      
      <!-- Steps - horizontal for large screens, vertical for mobile -->
      <div class="grid grid-cols-1 md:grid-cols-5 gap-6 relative z-10">
        {steps.map((step, index) => (
          <div class={`roadmap-item opacity-0 flex md:flex-col ${index % 2 === 0 ? 'md:items-end' : 'md:items-start'} items-start`} data-index={index}>
            <!-- Mobile timeline dot - only visible on small screens -->
            <div class="w-8 h-8 rounded-full bg-gradient-to-br from-purple-600 to-blue-500 mr-4 flex-shrink-0 flex items-center justify-center md:hidden">
              {index + 1}
            </div>
            
            <!-- Desktop timeline dot - only visible on large screens -->
            <div class="hidden md:flex w-8 h-8 rounded-full border-4 border-white bg-gradient-to-br from-purple-600 to-blue-500 shadow-md z-10 mb-4">
              <span class="text-white text-xs font-semibold m-auto">{index + 1}</span>
            </div>
            
            <!-- Content card -->
            <div class="flex-1 md:w-full bg-white border border-gray-100 rounded-xl p-4 shadow-md hover:shadow-lg transition duration-300 hover:-translate-y-1">
              <div class="flex items-center gap-3 mb-2">
                <div class={`w-8 h-8 rounded-full flex items-center justify-center bg-gradient-to-br from-purple-600 to-blue-500 hidden md:flex`}>
                  {step.icon === "subscribe" && (
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  )}
                  {step.icon === "pool" && (
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  )}
                  {step.icon === "rebalance" && (
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                  )}
                  {step.icon === "unlock" && (
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z" />
                    </svg>
                  )}
                  {step.icon === "profit" && (
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                  )}
                </div>
                <div>
                  <h3 class="text-lg font-medium">{step.title}</h3>
                  <div class="text-xs text-purple-600 font-mono">Month {step.month}</div>
                </div>
              </div>
              
              <p class="text-gray-600 text-sm leading-relaxed">{step.description}</p>
              
              <!-- Technical metrics/data points - Academic touch, collapsed for mobile -->
              <div class="mt-3 grid grid-cols-2 gap-2">
                {step.icon === "subscribe" && (
                  <>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Min Contribution</span>
                      <span class="font-mono">€50/mo</span>
                    </div>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Conversion Fee</span>
                      <span class="font-mono">1.5%</span>
                    </div>
                  </>
                )}
                {step.icon === "pool" && (
                  <>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Stop-Loss</span>
                      <span class="font-mono">-20%</span>
                    </div>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Deposit Fee</span>
                      <span class="font-mono">0.3%</span>
                    </div>
                  </>
                )}
                {step.icon === "rebalance" && (
                  <>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Take-Profit</span>
                      <span class="font-mono">+50%</span>
                    </div>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Rebalance Fee</span>
                      <span class="font-mono">0.2%</span>
                    </div>
                  </>
                )}
                {step.icon === "unlock" && (
                  <>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Unlock %</span>
                      <span class="font-mono">25%</span>
                    </div>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Est. APY</span>
                      <span class="font-mono">15-25%</span>
                    </div>
                  </>
                )}
                {step.icon === "profit" && (
                  <>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Profit Share</span>
                      <span class="font-mono">80%</span>
                    </div>
                    <div class="bg-gray-50 rounded p-1.5 text-xs">
                      <span class="block text-gray-500">Exit Fee</span>
                      <span class="font-mono">0.5%</span>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  // Intersection Observer for animating roadmap items
  const roadmapItems = document.querySelectorAll('.roadmap-item');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Add animation classes with delay based on index
        const index = parseInt(entry.target.dataset.index);
        setTimeout(() => {
          entry.target.classList.add('animate-in');
          entry.target.style.opacity = 1;
        }, index * 150);
        
        // Stop observing after animation
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.1 });
  
  // Observe all roadmap items
  roadmapItems.forEach(item => {
    observer.observe(item);
  });
</script>

<style>
  /* Roadmap animations */
  .roadmap-item {
    transition: opacity 0.5s ease, transform 0.6s ease;
  }
  
  .roadmap-item.animate-in {
    opacity: 1 !important;
  }
  
  /* Add academic/technical styling */
  .font-mono {
    font-family: 'Roboto Mono', monospace;
  }
  
  /* Timeline animations */
  @keyframes pulse-glow {
    0%, 100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }
    50% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }
  }
  
  .roadmap-item:hover .rounded-full {
    animation: pulse-glow 2s infinite;
  }
  
  /* Text gradient utility class */
  .text-gradient {
    background: linear-gradient(120deg, rgb(108, 51, 255) 0%, rgb(51, 209, 255) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
  }
</style> 